#https://gitlab.com/burke-software/django-helm-chart/-/tree/master/templates

# Default values for django.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: 
  pullPolicy: IfNotPresent
  # pullPolicy: Always
  tag: 

imagePullSecrets:
  - name: 

nameOverride: "" # append this name to helm installation name.
# helm deploy my-awesome-app django-app/     => my-awesome-nameOverride-app-web-74d48f548f-x4zhs
fullnameOverride: "" # replace entire helm installation name with this.
# helm deploy my-awesome-app django-app/     => fullnameOverride-web-74d48f548f-x4zhs

env:
  normal: 
    #App settings
    APP_DEBUG: true
    DJANGO_LOGLEVEL: debug
    FRONTEND_URL: 
    BACKEND_URL: 

    DISABLE_DATABASE_MIGRATE: true # default false (switch to true in case we wanted to disable built in migrations - dealing with sensitive data)


  secret: 
    SECRET_KEY: 
    SENTRY_DSN: 

web:
  replicaCount: 2
  port: 8000
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  budget:
    minAvailable: 1 # Ignored when replicaCount is 1
  resources:
    limits:
      cpu: 1000m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
    # podAntiAffinity:
    #   preferredDuringSchedulingIgnoredDuringExecution:
    #   - weight: 100
    #     podAffinityTerm:
    #       labelSelector:
    #         matchExpressions:
    #         - key: app.kubernetes.io/instance
    #           operator: In
    #           values:
    #           - glitchtip-prod-web
    #       topologyKey: kubernetes.io/hostname

  #startup first, if passes, we do readiness (if failed we stop the svc/requests), liveness if failed will restart
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  startupProbe:
    failureThreshold: 10
    initialDelaySeconds: 5
    timeoutSeconds: 10
    path: "/api/v1/healthcheck/?startupProbe"
  readinessProbe:
    failureThreshold: 10
    initialDelaySeconds: 5
    timeoutSeconds: 10
    path: "/api/v1/healthcheck/?readinessProbe"
  livenessProbe:
    failureThreshold: 5
    initialDelaySeconds: 5
    timeoutSeconds: 10
    path: "/api/v1/healthcheck/?livenessProbe"

  service:
    type: ClusterIP
    port: 8000

  ingress:
    enabled: true
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"

    hosts:
      - host: 
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
     - secretName: example-tls
       hosts:
         - 

worker:
  enabled: false
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 90
    # targetMemoryUtilizationPercentage: 80
  resources:
    limits:
      cpu: 900m
      memory: 768Mi
    requests:
      cpu: 100m
      memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  args: ['celery', '-A', 'project', 'worker', '-l', 'DEBUG']

beat:
  enabled: true
  args: ['celery', '-A', 'project', 'beat', '-l', 'DEBUG']

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: 

# Default to disabled, use a managed service. But can be enabled here.
postgresql:
  enabled: true
  postgresqlDatabase: main
  postgresqlUsername: postgres
  postgresqlPassword: postgres # Must be set
  servicePort: 5432

# Default to disabled, use a managed service. But can be enabled here.
redis:
  enabled: true
  auth:
    enabled: true
    password: redis-password

  master:
    persistence:
      enabled: false
  replica:
    replicaCount: 1
    persistence:
      enabled: false

# hostAliases:
#   - ip: 
#     hostnames:
#     - ""
